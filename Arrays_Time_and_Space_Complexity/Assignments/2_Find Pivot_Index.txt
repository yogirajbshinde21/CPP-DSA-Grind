Problem: https://leetcode.com/problems/find-pivot-index/description/


Solution:-

Method 1--> Brute Force method 




class Solution {
public:

    int bruteForce(vector<int>& nums){

        int n = nums.size();
        for(int i=0;i<n;i++) {

            int lsum = 0;
            int rsum = 0;   
                     
            //For left sum
            for(int j=0;j<i;j++){
                lsum+=nums[j];
            }

            //For right sum
            for(int j=i+1;j<n;j++){
                rsum+=nums[j];
            }

            if(lsum==rsum) return i;
        }

        return -1;
    }



    int pivotIndex(vector<int>& nums) {
        return bruteForce(nums);
    }
};

Time complexity = O(n^2)
Space Complexity = O(1)

===================================================

Method 2 --> By yogiraj: This is the better approach as it has O(1) space complexity and O(n) time complexity.


class Solution {
public:



    int method2(vector<int>& nums){
        int n = nums.size();
        int leftSum = 0;

        //Let's find the sum
        int sum = 0;
        for(int i=0;i<n;i++){
            sum+=nums[i];
        }

        // we got the sum.

        // now apply the logic
        for(int i=0;i<n;i++){
            if(i==0){
                leftSum = 0;
                sum = sum-nums[i];
                // continue;
            }
            else{
                leftSum = leftSum+nums[i-1];
                sum = sum-nums[i];
            }

            if(leftSum == sum) return i;

        }
        return -1;
    }



    int pivotIndex(vector<int>& nums) {

        return method2(nums);
    }
};

Time Complexity: O(n)
Space Complexity: O(1)

===================================================


Method 3 --> By Codehelp:

class Solution {
public:

    int prefixSum(vector<int>& nums){
        int n = nums.size();
        vector<int> lsum(n);
        vector<int> rsum(n);
        lsum[0]=0;
        rsum[n-1]=0;

        for(int i=1;i<n;i++){
            lsum[i]=lsum[i-1]+nums[i-1]; 
        }

        for(int i=n-2;i>=0;i--){
            rsum[i]=rsum[i+1]+nums[i+1];
        }

        for(int i=0;i<n;i++){
            if(lsum[i]==rsum[i]){
                return i;
            }
        }
        return -1;

    }



    int pivotIndex(vector<int>& nums) {
        return prefixSum(nums);
    }
};


Time Complexity: O(n)
Space Complexity: O(n)