Question: https://leetcode.com/problems/rotate-array/description/

Q. Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.


Approach 1: Take a temp[] array and append last 'k' elements from the end of original arr[] in it.

Solution:- 

class Solution {
public:
    void rotate(vector<int>& nums, int k) {

        vector<int> temp(k);
        int n = nums.size();
        k = k%n;

        //Edge case
        if(k==0 || n<2){
            return;
        }

        //Store last k elements in new 'temp' array
        for(int i=0;i<k;i++){
            temp[k-i-1] = nums[n-i-1]; 
        }


        //moving each element forward by k steps in nums[]
        for(int i=n-1;i>=k;i--){
            nums[i] = nums[i-k];
        }


        //pasting all elements of temp array in the beginning of nums[] array.
        for(int i=0;i<k;i++){
            nums[i] = temp[i];
        }
    }
};


Time Complexity: O(n), as we loop through the array twice (once for storing elements in temp and once for rearranging them).

Space Complexity: O(k), as we use a temp array of size k.


========================================================================================================================


Approach 2: Modulous formula approach.

Formula :- (index + k) % n

Solution:- 
class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> ans(n);
        
        for(int index=0;index<n;index++){
            int newIndex = (index+k)%n;
            ans[newIndex] = nums[index];
        }

        nums = ans;
    }
};


Time Complexity: O(n), as we loop through the array once to compute the new indices.

Space Complexity: O(n), as we create a new array `ans` to store the rotated array.


========================================================================================================================



Approach:- (Note Yogiraj - Need to understand it again! as i didn't understood it clearly.)
Approach involves rotating the array in-place by repeatedly moving the last element to the front. 
This can be done without using any extra space, achieving O(1) space complexity.

Solution:-

class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int n = nums.size();
        k = k % n;

        // Edge case
        if (n < 2 || k == 0) {
            return;
        }

        // Reverse the entire array
        reverse(nums.begin(), nums.end());
        // Reverse the first k elements
        reverse(nums.begin(), nums.begin() + k);
        // Reverse the remaining elements
        reverse(nums.begin() + k, nums.end());
    }
};

Time Complexity: O(n), as we reverse the array in three steps.

Space Complexity: O(1), as no extra space is used.
