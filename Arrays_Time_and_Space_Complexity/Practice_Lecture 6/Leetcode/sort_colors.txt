Question:
https://leetcode.com/problems/sort-colors/


Solution:

Approach 1: 2 pointer approach:

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int n = nums.size();
        int left = 0;
        int index = 0;
        int right = n-1;

        while(index<=right){
            if(nums[index]==0){
                swap(nums[left],nums[index]);
                left++;
                index++;
            }
            else if(nums[index]==2){
                swap(nums[right],nums[index]);
                right--;
            }
            else{
                index++;
            }
        }
    }
};

===============================================================================


Approach 2: Counting approach:

class Solution {
public:
    void sortColors(vector<int>& nums) {
        // Step 1: Count the frequency of 0, 1, and 2
        int count0 = 0, count1 = 0, count2 = 0;
        for (int num : nums) {
            if (num == 0) count0++;
            else if (num == 1) count1++;
            else if (num == 2) count2++;
        }

        // Step 2: Overwrite the array
        int index = 0;
        // Fill 0s
        for (int i = 0; i < count0; i++) {
            nums[index++] = 0;
        }
        // Fill 1s
        for (int i = 0; i < count1; i++) {
            nums[index++] = 1;
        }
        // Fill 2s
        for (int i = 0; i < count2; i++) {
            nums[index++] = 2;
        }
    }
};
